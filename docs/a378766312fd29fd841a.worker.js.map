{"version":3,"sources":["webpack:///webpack/bootstrap a378766312fd29fd841a","webpack:///./src/indexes.js","webpack:///./~/redux-indexers/index.js","webpack:///./src/services/worker.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA,mDAA2C,cAAc;;AAEzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAK;AACL;AACA;;AAEA;AACA;AACA;AACA,mCAA2B,0BAA0B,EAAE;AACvD,yCAAiC,eAAe;AAChD;AACA;AACA;;AAEA;AACA,8DAAsD,+DAA+D;;AAErH;AACA;;AAEA;AACA;;;;;;;;;;;;;AChEA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,oCAAoC;AAC7C,yCAAyC,SAAS,6BAA6B,oBAAoB,YAAY,uGAAuG;AACtN;AACA;AACA;AACA,6CAA6C,SAAS,6BAA6B,oBAAoB,aAAa,2CAA2C;AAC/J;AACA,cAAc,6BAA6B;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA,kDAAkD,UAAU,6BAA6B,qBAAqB,cAAc,yGAAyG;AACrO,kBAAkB,oCAAoC;AACtD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+BAA+B,mBAAmB,6BAA6B,8BAA8B,mBAAmB;AAChI;AACA,yDAAyD;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,mBAAmB,6BAA6B,8BAA8B,oBAAoB,wDAAwD;AAC7L;AACA,8BAA8B,oDAAoD;AAClF;AACA,wCAAwC,oBAAoB,sIAAsI;AAClM;AACA,mCAAmC,uDAAuD;AAC1F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,8BAA8B;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;ACrLA;AACA;AACA,4CAA4C,OAAO;AACnD;AACA;AACA;AACA;AACA;AACA;AACA,8CAA8C,cAAc;AAC5D;AACA,uBAAuB,OAAO;AAC9B,uBAAuB,kBAAkB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,8BAA8B;AACjD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,uCAAuC,oBAAoB;AAC3D;AACA;AACA,kBAAkB,mBAAmB;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAkC,iBAAiB;AACnD,gCAAgC,eAAe;AAC/C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B,2CAA2C,gBAAgB;AAC3D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,4BAA4B;AAC3F;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,+DAA+D,8BAA8B;AAC7F;AACA;AACA;AACA,yDAAyD,2BAA2B;AACpF;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD;AACA;AACA,2BAA2B,YAAY;AACvC,uCAAuC,sBAAsB;AAC7D;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;AChRA;AACA,8CAA8C,cAAc;AAC5D;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"a378766312fd29fd841a.worker.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// identity function for calling harmony imports with the correct context\n \t__webpack_require__.i = function(value) { return value; };\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 2);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap a378766312fd29fd841a","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst redux_indexers_1 = require(\"redux-indexers\");\nexports.notesIndexer = new redux_indexers_1.Indexer(\"byPath\");\nexports.notesIndexer.addIndex(\"byPath\", note => note.path.split(\"/\"));\nexports.notesIndexer.addIndex(\"byId\", note => [note.id]);\nexports.notesIndexer.addIndex(\"byLanguage\", note => [note.attributes.language]);\nexports.notesIndexer.addIndex(\"byHasLocalEdits\", note => [note.localEdits]);\nexports.notesIndexer.addIndex(\"byHasConflicts\", note => [note.hasConflicts]);\nexports.notesIndexer.addIndex(\"byEditsComplete\", note => [\n    note.attributes.editsComplete,\n]);\nexports.notesIndexer.addIndex(\"byAudioFileId\", note => [note.attributes.audioFileId]);\nexports.storedFilesIndexer = new redux_indexers_1.Indexer(\"byId\");\nexports.storedFilesIndexer.addIndex(\"byId\", sf => [sf.id]);\nexports.storedFilesIndexer.addIndex(\"byRev\", sf => [sf.revision]);\nexports.termsIndexer = new redux_indexers_1.Indexer(\"byNoteIdReferenceAndMarker\");\nexports.termsIndexer.addIndex(\"byNoteIdReferenceAndMarker\", term => [\n    term.noteId,\n    term.attributes.reference,\n    term.attributes.marker,\n]);\nexports.termsIndexer.addIndex(\"byLanguage\", term => [term.language]);\nexports.clozesIndexer = new redux_indexers_1.Indexer(\"byNoteIdReferenceMarkerAndClozeIdx\");\nexports.clozesIndexer.addIndex(\"byNoteIdReferenceMarkerAndClozeIdx\", cloze => [\n    cloze.noteId,\n    cloze.reference,\n    cloze.marker,\n    cloze.clozeIdx,\n]);\nexports.clozesIndexer.addIndex(\"byLanguageSpokenAndNextDue\", cloze => [\n    cloze.language,\n    cloze.attributes.type == \"listen\" || cloze.attributes.type == \"speak\",\n    !cloze.attributes.schedule.delayIntervalMinutes,\n    cloze.attributes.schedule.nextDueMinutes,\n]);\nexports.clozesIndexer.addIndex(\"byLanguageSpokenNewAndNextDue\", cloze => [\n    cloze.language,\n    cloze.attributes.type == \"listen\" || cloze.attributes.type == \"speak\",\n    cloze.attributes.schedule.isNew,\n    !cloze.attributes.schedule.delayIntervalMinutes,\n    cloze.attributes.schedule.nextDueMinutes,\n]);\nexports.clozesIndexer.addIndex(\"byNextDue\", cloze => [\n    cloze.attributes.schedule.nextDueMinutes,\n]);\nexports.clozeAnswersIndexer = new redux_indexers_1.Indexer(\"byNoteIdReferenceMarkerClozeIdxAndAnswerIdx\");\nexports.clozeAnswersIndexer.addIndex(\"byNoteIdReferenceMarkerClozeIdxAndAnswerIdx\", answer => [\n    answer.noteId,\n    answer.reference,\n    answer.marker,\n    answer.clozeIdx,\n    answer.answerIdx > 0 ? 1 : 0,\n]);\nexports.clozeAnswersIndexer.addIndex(\"byLanguageAndAnswered\", answer => [\n    answer.language,\n    answer.answer[0],\n]);\nexports.clozeAnswersIndexer.addGroupedIndex(\"byLanguageAndFirstAnsweredOfNoteIdReferenceMarkerAndClozeIdx\", answer => [answer.language, answer.answer[0]], \"byNoteIdReferenceMarkerClozeIdxAndAnswerIdx\", answer => [answer.noteId, answer.reference, answer.marker, answer.clozeIdx], (iter, reverseIter) => iter());\nexports.clozeAnswersIndexer.addGroupedIndex(\"byLanguageAndLastAnsweredOfNoteIdReferenceMarkerAndClozeIdx\", answer => [answer.language, answer.answer[0]], \"byNoteIdReferenceMarkerClozeIdxAndAnswerIdx\", answer => [answer.noteId, answer.reference, answer.marker, answer.clozeIdx], (iter, reverseIter) => reverseIter());\nexports.indexesInitialState = {\n    notes: exports.notesIndexer.empty(),\n    terms: exports.termsIndexer.empty(),\n    clozes: exports.clozesIndexer.empty(),\n    clozeAnswers: exports.clozeAnswersIndexer.empty(),\n    storedFiles: exports.storedFilesIndexer.empty(),\n};\nfunction loadIndexables(indexes, indexables) {\n    indexes = Object.assign({}, indexes);\n    let normalizedIndexable = indexables instanceof Array ? indexables : [indexables];\n    for (let indexable of normalizedIndexable) {\n        if (indexable.note)\n            indexes.notes = exports.notesIndexer.update(indexes.notes, [indexable.note]);\n        if (indexable.notes)\n            indexes.notes = exports.notesIndexer.update(indexes.notes, indexable.notes);\n        if (indexable.terms)\n            indexes.terms = exports.termsIndexer.update(indexes.terms, indexable.terms);\n        if (indexable.clozes)\n            indexes.clozes = exports.clozesIndexer.update(indexes.clozes, indexable.clozes);\n        if (indexable.clozeAnswers)\n            indexes.clozeAnswers = exports.clozeAnswersIndexer.update(indexes.clozeAnswers, indexable.clozeAnswers);\n        if (indexable.storedFiles)\n            indexes.storedFiles = exports.storedFilesIndexer.update(indexes.storedFiles, indexable.storedFiles);\n    }\n    return indexes;\n}\nexports.loadIndexables = loadIndexables;\nfunction findNoteTree(indexes, id) {\n    let note = redux_indexers_1.Indexer.getFirstMatching(indexes.notes.byId, [id]);\n    if (note) {\n        let terms = redux_indexers_1.Indexer.getAllMatching(indexes.terms.byNoteIdReferenceAndMarker, [id]);\n        let clozes = redux_indexers_1.Indexer.getAllMatching(indexes.clozes.byNoteIdReferenceMarkerAndClozeIdx, [id]);\n        let clozeAnswers = redux_indexers_1.Indexer.getAllMatching(indexes.clozeAnswers.byNoteIdReferenceMarkerClozeIdxAndAnswerIdx, [id]);\n        return { note, terms, clozes, clozeAnswers };\n    }\n    return undefined;\n}\nexports.findNoteTree = findNoteTree;\nfunction normalizedNote(noteTree) {\n    let { note, terms, clozes, clozeAnswers } = noteTree;\n    let normalizedNote = Object.assign({}, note, { attributes: Object.assign({}, note.attributes, { terms: [] }), id: undefined, version: undefined, localEdits: undefined, path: undefined, hasConflicts: undefined });\n    var idxOfClozes = 0;\n    var idxOfAnswers = 0;\n    for (var term of terms) {\n        let normalizedTerm = Object.assign({}, term, { attributes: Object.assign({}, term.attributes, { clozes: [] }), noteId: undefined, language: undefined });\n        normalizedNote.attributes.terms.push(normalizedTerm);\n        for (; idxOfClozes < clozes.length; ++idxOfClozes) {\n            var cloze = clozes[idxOfClozes];\n            if (cloze.reference !== term.attributes.reference ||\n                cloze.marker !== term.attributes.marker ||\n                cloze.noteId !== term.noteId) {\n                break;\n            }\n            let normalizedCloze = Object.assign({}, cloze, { attributes: Object.assign({}, cloze.attributes, { answers: [] }), noteId: undefined, reference: undefined, marker: undefined, clozeIdx: undefined, language: undefined });\n            for (; idxOfAnswers < clozeAnswers.length; ++idxOfAnswers) {\n                let clozeAnswer = clozeAnswers[idxOfAnswers];\n                if (clozeAnswer.reference !== cloze.reference ||\n                    clozeAnswer.marker !== cloze.marker ||\n                    clozeAnswer.noteId !== cloze.noteId ||\n                    clozeAnswer.clozeIdx !== cloze.clozeIdx) {\n                    break;\n                }\n                normalizedCloze.attributes.answers.push(clozeAnswer.answer);\n            }\n            normalizedTerm.attributes.clozes.push(normalizedCloze);\n        }\n    }\n    return normalizedNote;\n}\nexports.normalizedNote = normalizedNote;\nfunction denormalizedNote(normalizedNote, id, path, version) {\n    let note = Object.assign({}, normalizedNote, { attributes: Object.assign({}, normalizedNote.attributes, { terms: undefined }), id,\n        path,\n        version, localEdits: false, hasConflicts: false });\n    let terms = [];\n    let clozes = [];\n    let clozeAnswers = [];\n    let noteTree = {\n        note,\n        terms,\n        clozes,\n        clozeAnswers,\n    };\n    for (let normalizedTerm of normalizedNote.attributes.terms) {\n        let term = Object.assign({}, normalizedTerm, { attributes: Object.assign({}, normalizedTerm.attributes, { clozes: undefined }), language: note.attributes.language, noteId: note.id });\n        terms.push(term);\n        for (let clozeIdx = 0; clozeIdx < normalizedTerm.attributes.clozes.length; ++clozeIdx) {\n            let normalizedCloze = normalizedTerm.attributes.clozes[clozeIdx];\n            let cloze = Object.assign({}, normalizedCloze, { clozeIdx, marker: term.attributes.marker, reference: term.attributes.reference, language: note.attributes.language, noteId: note.id });\n            clozes.push(cloze);\n            for (let answerIdx = 0; answerIdx < normalizedCloze.attributes.answers.length; ++answerIdx) {\n                let normalizedClozeAnswer = normalizedCloze.attributes.answers[answerIdx];\n                let clozeAnswer = {\n                    answer: normalizedClozeAnswer,\n                    answerIdx,\n                    clozeIdx,\n                    marker: term.attributes.marker,\n                    reference: term.attributes.reference,\n                    language: note.attributes.language,\n                    noteId: note.id,\n                };\n                clozeAnswers.push(clozeAnswer);\n            }\n        }\n    }\n    return noteTree;\n}\nexports.denormalizedNote = denormalizedNote;\nfunction removeNote(indexes, note) {\n    indexes = Object.assign({}, indexes);\n    indexes.notes = exports.notesIndexer.removeAll(indexes.notes, [note]);\n    let terms = redux_indexers_1.Indexer.getAllMatching(indexes.terms.byNoteIdReferenceAndMarker, [\n        note.id,\n    ]);\n    indexes.terms = exports.termsIndexer.removeAll(indexes.terms, terms);\n    let clozes = redux_indexers_1.Indexer.getAllMatching(indexes.clozes.byNoteIdReferenceMarkerAndClozeIdx, [note.id]);\n    indexes.clozes = exports.clozesIndexer.removeAll(indexes.clozes, clozes);\n    let clozeAnswers = redux_indexers_1.Indexer.getAllMatching(indexes.clozeAnswers.byNoteIdReferenceMarkerClozeIdxAndAnswerIdx, [note.id]);\n    indexes.clozeAnswers = exports.clozeAnswersIndexer.removeAll(indexes.clozeAnswers, clozeAnswers);\n    return indexes;\n}\nexports.removeNote = removeNote;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/indexes.js\n// module id = 0\n// module chunks = 0","\"use strict\";\nvar __assign = (this && this.__assign) || Object.assign || function(t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n        s = arguments[i];\n        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))\n            t[p] = s[p];\n    }\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nfunction bisect(array, e, cmp, l, r) {\n    if (l === void 0) { l = 0; }\n    if (r === void 0) { r = array.length; }\n    var mid;\n    var c;\n    while (l < r) {\n        mid = l + r >>> 1;\n        c = cmp(e, array[mid]);\n        if (c > 0) {\n            l = mid + 1;\n        }\n        else {\n            r = mid;\n        }\n    }\n    return l;\n}\nexports.bisect = bisect;\nfunction arrayCmp(a, b) {\n    for (var i = 0; i < a.length && i < b.length; ++i) {\n        var aVal = a[i];\n        var bVal = b[i];\n        if (aVal === bVal)\n            continue;\n        if (bVal === Infinity)\n            return -1;\n        if (aVal === Infinity)\n            return 1;\n        if (aVal == null)\n            return -1;\n        if (bVal == null)\n            return 1;\n        if (aVal < bVal)\n            return -1;\n        return 1;\n    }\n    if (a.length === b.length)\n        return 0;\n    if (a.length > b.length)\n        return 1;\n    return -1;\n}\nexports.arrayCmp = arrayCmp;\nfunction numberCmp(a, b) {\n    return a - b;\n}\nexports.numberCmp = numberCmp;\nfunction cmpKeyToEntry(a, b) {\n    return arrayCmp(a, b[0]);\n}\nvar Indexer = (function () {\n    function Indexer(mainIndexName) {\n        this.mainIndexName = mainIndexName;\n        this.indexKeyers = {};\n        this.indexDependentGroup = {};\n        this.indexGroupKeyers = {};\n        this.indexReducers = {};\n        this.indexes = [];\n    }\n    Indexer.prototype.addIndex = function (attr, keyer) {\n        if (attr in this.indexKeyers) {\n            throw new Error(\"duplicate definition for index \" + attr);\n        }\n        this.indexKeyers[attr] = keyer;\n        this.indexes.push(attr);\n    };\n    Indexer.prototype.addGroupedIndex = function (attr, keyer, groupAttr, groupKeyer, reducer) {\n        if (!this.indexKeyers[groupAttr]) {\n            throw new Error(\"Dependent index \" + groupAttr + \" should be defined before \" + attr);\n        }\n        this.addIndex(attr, keyer);\n        this.indexDependentGroup[attr] = groupAttr;\n        this.indexGroupKeyers[attr] = groupKeyer;\n        this.indexReducers[attr] = reducer;\n    };\n    Indexer.prototype.matchesInitialState = function (initialState) {\n        return this._empty === initialState;\n    };\n    Indexer.prototype.empty = function () {\n        if (this._empty)\n            return this._empty;\n        var result = this._empty = {};\n        for (var k in this.indexKeyers) {\n            result[k] = [];\n        }\n        return result;\n    };\n    Indexer.prototype.removeAll = function (indexes, values) {\n        return this.splice(indexes, values, []);\n    };\n    Indexer.prototype.removeByPk = function (indexes, primaryKey) {\n        return this.removeAll(indexes, Indexer.getAllMatching(indexes[this.mainIndexName], primaryKey));\n    };\n    Indexer.prototype.update = function (indexes, values) {\n        var _this = this;\n        var oldValues = [];\n        var newValues = [];\n        var uniqueValues = uniqueIndex(this.indexKeyers[this.mainIndexName], values);\n        uniqueValues.forEach(function (v) {\n            var existing = Indexer.getFirstMatching(indexes[_this.mainIndexName], v[0]);\n            if (existing)\n                oldValues.push(existing);\n            newValues.push(v[1]);\n        });\n        return this.splice(indexes, oldValues, newValues);\n    };\n    Indexer.iterator = function (index, startKey, endKey) {\n        if (startKey === void 0) { startKey = null; }\n        if (endKey === void 0) { endKey = null; }\n        var _a = Indexer.getRangeFrom(index, startKey, endKey), startIdx = _a.startIdx, endIdx = _a.endIdx;\n        var idx = startIdx;\n        return function () {\n            if (idx < endIdx) {\n                return index[idx++][1];\n            }\n            return null;\n        };\n    };\n    Indexer.reverseIter = function (index, startKey, endKey) {\n        if (startKey === void 0) { startKey = null; }\n        if (endKey === void 0) { endKey = null; }\n        if (startKey)\n            startKey = startKey.concat([undefined]);\n        if (endKey)\n            endKey = endKey.concat([undefined]);\n        var _a = Indexer.getRangeFrom(index, endKey, startKey), startIdx = _a.startIdx, endIdx = _a.endIdx;\n        var idx = endIdx;\n        return function () {\n            if (idx > startIdx) {\n                return index[--idx][1];\n            }\n            return null;\n        };\n    };\n    Indexer.getAllMatching = function (index, key) {\n        var _a = Indexer.getRangeFrom(index, key, key.concat([Infinity])), startIdx = _a.startIdx, endIdx = _a.endIdx;\n        return index.slice(startIdx, endIdx).map(function (_a) {\n            var _ = _a[0], value = _a[1];\n            return value;\n        });\n    };\n    Indexer.getAllUniqueMatchingAnyOf = function (index, keys) {\n        var result = [];\n        var retrievedIdxs = new Int8Array(index.length);\n        for (var _i = 0, keys_1 = keys; _i < keys_1.length; _i++) {\n            var key = keys_1[_i];\n            var _a = Indexer.getRangeFrom(index, key, key.concat([Infinity])), startIdx = _a.startIdx, endIdx = _a.endIdx;\n            for (; startIdx < endIdx; ++startIdx) {\n                if (retrievedIdxs[startIdx])\n                    continue;\n                retrievedIdxs[startIdx] = 1;\n                result.push(index[startIdx][1]);\n            }\n        }\n        return result;\n    };\n    Indexer.getRangeFrom = function (index, startKey, endKey) {\n        if (startKey === void 0) { startKey = null; }\n        if (endKey === void 0) { endKey = null; }\n        var startIdx;\n        var endIdx;\n        if (startKey == null) {\n            startIdx = 0;\n        }\n        else {\n            startIdx = bisect(index, startKey, cmpKeyToEntry);\n        }\n        if (endKey == null) {\n            endIdx = index.length;\n        }\n        else {\n            endIdx = bisect(index, endKey, cmpKeyToEntry);\n        }\n        return { startIdx: startIdx, endIdx: endIdx };\n    };\n    Indexer.getFirstMatching = function (index, key) {\n        var iter = Indexer.iterator(index, key, key.concat([Infinity]));\n        return iter();\n    };\n    Indexer.prototype.splice = function (indexes, removeValues, addValues) {\n        var oldIndexes = indexes;\n        if (!removeValues.length && !addValues.length) {\n            return indexes;\n        }\n        indexes = __assign({}, indexes);\n        for (var _i = 0, _a = this.indexes; _i < _a.length; _i++) {\n            var indexName = _a[_i];\n            var index = indexes[indexName];\n            var valuesToRemove = removeValues;\n            var valuesToAdd = addValues;\n            var groupIndexName = this.indexDependentGroup[indexName];\n            if (groupIndexName) {\n                var groupKeyer = this.indexGroupKeyers[indexName];\n                var reducer = this.indexReducers[indexName];\n                var updateGroups = uniqueIndex(groupKeyer, valuesToRemove.concat(valuesToAdd));\n                valuesToRemove = [];\n                valuesToAdd = [];\n                for (var _b = 0, updateGroups_1 = updateGroups; _b < updateGroups_1.length; _b++) {\n                    var updateGroup = updateGroups_1[_b];\n                    var updateGroupKey = updateGroup[0];\n                    var prevGroupIndex = oldIndexes[groupIndexName];\n                    var iter = Indexer.iterator(prevGroupIndex, updateGroupKey, updateGroupKey.concat([Infinity]));\n                    var reverseIter = Indexer.reverseIter(prevGroupIndex, updateGroupKey.concat([Infinity]), updateGroupKey);\n                    var remove = reducer(iter, reverseIter);\n                    var curGroupIndex = indexes[groupIndexName];\n                    iter = Indexer.iterator(curGroupIndex, updateGroupKey, updateGroupKey.concat([Infinity]));\n                    reverseIter = Indexer.reverseIter(curGroupIndex, updateGroupKey.concat([Infinity]), updateGroupKey);\n                    var add = reducer(iter, reverseIter);\n                    if (remove === add)\n                        continue;\n                    if (remove)\n                        valuesToRemove.push(remove);\n                    if (add)\n                        valuesToAdd.push(add);\n                }\n            }\n            if (!valuesToAdd.length && !valuesToRemove.length) {\n                continue;\n            }\n            index = indexes[indexName] = indexes[indexName].slice();\n            for (var _c = 0, valuesToRemove_1 = valuesToRemove; _c < valuesToRemove_1.length; _c++) {\n                var value = valuesToRemove_1[_c];\n                this.removeFromIndex(index, indexName, value);\n            }\n            for (var _d = 0, valuesToAdd_1 = valuesToAdd; _d < valuesToAdd_1.length; _d++) {\n                var value = valuesToAdd_1[_d];\n                this.addToIndex(index, indexName, value);\n            }\n        }\n        return indexes;\n    };\n    Indexer.prototype.strictValueKeyOf = function (indexName, value) {\n        var pk = this.indexKeyers[this.mainIndexName](value);\n        if (indexName === this.mainIndexName) {\n            return pk;\n        }\n        var indexKey = this.indexKeyers[indexName](value);\n        Array.prototype.push.apply(indexKey, pk);\n        return indexKey;\n    };\n    Indexer.prototype.addToIndex = function (index, indexName, v) {\n        var key = this.strictValueKeyOf(indexName, v);\n        var startIdx = Indexer.getRangeFrom(index, key).startIdx;\n        index.splice(startIdx, 0, [key, v]);\n    };\n    Indexer.prototype.removeFromIndex = function (index, indexName, v) {\n        var key = this.strictValueKeyOf(indexName, v);\n        var _a = Indexer.getRangeFrom(index, key, key.concat([null])), startIdx = _a.startIdx, endIdx = _a.endIdx;\n        index.splice(startIdx, endIdx - startIdx);\n    };\n    return Indexer;\n}());\nexports.Indexer = Indexer;\nfunction uniqueIndex(keyer, values, index) {\n    if (index === void 0) { index = []; }\n    for (var _i = 0, values_1 = values; _i < values_1.length; _i++) {\n        var value = values_1[_i];\n        var key = keyer(value);\n        var _a = Indexer.getRangeFrom(index, key, key.concat([null])), startIdx = _a.startIdx, endIdx = _a.endIdx;\n        index.splice(startIdx, endIdx - startIdx, [key, value]);\n    }\n    return index;\n}\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/redux-indexers/index.js\n// module id = 1\n// module chunks = 0","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst indexes_1 = require(\"../indexes\");\nif (typeof importScripts === 'function') {\n    self.onmessage = (ev) => {\n        let data = ev.data;\n        self.postMessage(doIndexesLoadingWork(data));\n    };\n}\nfunction doIndexesLoadingWork(data) {\n    return indexes_1.loadIndexables(indexes_1.indexesInitialState, data);\n}\nexports.doIndexesLoadingWork = doIndexesLoadingWork;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src/services/worker.js\n// module id = 2\n// module chunks = 0"],"sourceRoot":""}